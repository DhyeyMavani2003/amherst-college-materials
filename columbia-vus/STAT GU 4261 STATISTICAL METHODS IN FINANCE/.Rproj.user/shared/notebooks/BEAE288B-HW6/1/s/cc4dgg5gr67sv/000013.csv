"0","library(MASS)"
"0","library(fGarch)"
"0",""
"0",""
"0","n = ncol(data)-2"
"0","for (i in 1:n) {"
"0","  data_col = data[[i]]"
"0","  log_likelihood_sstd = function(x){"
"0","    return(-sum(dsstd(data_col, x[1], x[2], x[3], x[4], log = TRUE)))"
"0","  }"
"0","  log_likelihood_ged = function(beta){"
"0","    return(-sum(dged(data_col, mean = beta[1], sd = beta[2], nu = beta[3], log = TRUE)))"
"0","  }"
"0","  model_normal <- fitdistr(data[[i]], ""normal"")"
"0","  initial = c(mean(data[[i]]), sd(data[[i]]), length(data[[i]]), 1)"
"0","  model_sstd = optim(start, log_likelihood_sstd)"
"0","  neg_log_likelihood_sstd = model_sstd$value"
"0","  sstd_AIC = 2*neg_log_likelihood_sstd+2*length(model_sstd$par)"
"0","  sstd_BIC = 2*neg_log_likelihood_sstd+log(length(data[[i]]))*length(model_sstd$par)"
"0","  "
"0","  initial = c(mean(data[[i]]), sd(data[[i]]), 1)"
"0","  model_ged = optim(start, log_likelihood_ged)"
"0","  neg_log_likelihood_ged = model_ged$value"
"0","  ged_AIC = 2*neg_log_likelihood_ged+2*length(model_ged$par)"
"0","  ged_BIC = 2*neg_log_likelihood_ged+log(length(data[[i]]))*length(model_ged$par)"
"0","  "
"0","  norm_AIC <- AIC(model_normal)"
"0","  norm_BIC <- BIC(model_normal)"
"0","  AIC <- c(norm_AIC,sstd_AIC,ged_AIC)"
"0","  BIC <- c(norm_BIC,sstd_BIC,ged_BIC)"
"0","  names(AIC) <- c(""normal"",""sstd"",""ged"")"
"0","  names(BIC) <- c(""normal"",""sstd"",""ged"")"
"0","  best_model_AIC <- c(model_normal, model_sstd, model_ged)[which.min(AIC)]"
"0","  best_model_BIC <- c(model_normal, model_sstd, model_ged)[which.min(BIC)]"
"0","  best_AIC <- which.min(AIC)"
"0","  best_BIC <- which.min(BIC)"
"0","  "
"0","  optimal_models_AIC_wise[[i]] <- list(AIC, best_AIC, best_model_AIC)"
"0","  optimal_models_BIC_wise[[i]] <- list(BIC, best_BIC, best_model_BIC)"
"0","  "
"0","}"
"2","Warning: one-dimensional optimization by Nelder-Mead is unreliable:
use ""Brent"" or optimize() directly"
"2","Error in optim(start, log_likelihood_sstd) : 
  cannot coerce type 'closure' to vector of type 'double'
"
