"0","# importing the quadprog library"
"0","library(quadprog)"
"0","# getting the number of tickers in consideration"
"0","n_tickers = length(returns[1, ])"
"0","# initializing daily risk free rate"
"0","mu_rf = 3/365"
"0",""
"0","# Using solve.QP for solving QP problems of the form:"
"0","# min(-d^Tb + (1/2)b^TDb) with constraints A^Tb >= b_0"
"0",""
"0","# creating matrix A"
"0","A = cbind(rep(1, n_tickers),"
"0","          mean_vect,"
"0","          diag(1,nrow = n_tickers),"
"0","          diag(-1, nrow = n_tickers))"
"0","# creating muP"
"0","muP = seq(0.04, 0.08, length=400)"
"0","# creating sdP"
"0","sdP = muP"
"0",""
"0","# initializing format of the weights matrix"
"0","weights = matrix(0,"
"0","                 nrow = 400,"
"0","                 ncol = n_tickers)"
"0",""
"0","# solving the QP for each value "
"0","for (i in 1:length(muP)) {"
"0","  # solving QP"
"0","  result = solve.QP(Dmat = cov_mat,"
"0","                    dvec = rep(0, n_tickers),"
"0","                    Amat = A,"
"0","                    c(1,"
"0","                      muP[i],"
"0","                      rep(-0.1, n_tickers),"
"0","                      rep(-0.5, n_tickers)),"
"0","                    meq = 2)"
"0","  # storing standard deviation"
"0","  sdP[i] = sqrt(2 * result$value)"
"0","  # storing the weights"
"0","  weights[i,] = result$solution"
"0","}"
"0",""
"0","# plot the general standard deviation vs returns curve"
"0","plot(sdP, "
"0","     muP, "
"0","     type=""l"","
"0","     xlim=c(0,2.5),"
"0","     ylim=c(0,0.1))"
