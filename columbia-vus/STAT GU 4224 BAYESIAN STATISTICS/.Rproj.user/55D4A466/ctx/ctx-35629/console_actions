{
    "type": [
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2
    ],
    "data": [
        "> ",
        "cat(\"Posterior median: \", post_median, \"\\n\")",
        "Posterior median:  0.1561156 \n",
        "> ",
        "cat(\"Posterior mode: \", post_mode, \"\\n\")",
        "Posterior mode:  0 \n",
        "> ",
        "cat(\"95% posterior interval: [\", post_interval[1], \", \", post_interval[2], \"]\\n\")",
        "95% posterior interval: [ 0 ,  0 ]\n",
        "> ",
        "",
        "> ",
        "library(mvtnorm)",
        "> ",
        "",
        "> ",
        "# Define observed data",
        "> ",
        "data <- matrix(c(-3.3, -2.6, 0.1, -0.2, -1.1, -1.5, 2.7, 1.5, 2.0, 1.9, -0.4, -0.3), ncol = 2)",
        "> ",
        "",
        "> ",
        "# Define grid of values for rho",
        "> ",
        "rho_grid <- seq(0, 1, length.out = 10000)",
        "> ",
        "",
        "> ",
        "# Define prior density function",
        "> ",
        "prior <- rep(1, length(rho_grid))",
        "> ",
        "",
        "> ",
        "# Define likelihood function",
        "> ",
        "likelihood <- sapply(rho_grid, function(rho) {",
        "+ ",
        "  mean(dmvnorm(data, mean = c(0,0), sigma = matrix(c(1, rho, rho, 1), nrow = 2), log = TRUE))",
        "+ ",
        "})",
        "> ",
        "",
        "> ",
        "# Compute unnormalized posterior density function",
        "> ",
        "posterior_unnorm <- prior * exp(likelihood)",
        "> ",
        "",
        "> ",
        "# Numerically integrate to obtain posterior density function",
        "> ",
        "posterior <- posterior_unnorm / sum(posterior_unnorm)",
        "> ",
        "",
        "> ",
        "# Plot posterior distribution",
        "> ",
        "plot(rho_grid, posterior, type = \"l\", xlab = \"Correlation coefficient rho\", ylab = \"Posterior density\")",
        "> ",
        "",
        "> ",
        "# Compute posterior mean, median, mode, and 95% interval",
        "> ",
        "post_mean <- sum(rho_grid * posterior)",
        "> ",
        "post_median <- rho_grid[which.min(abs(cumsum(posterior) == 0.5))]",
        "> ",
        "post_mode <- rho_grid[which.max(posterior)]",
        "> ",
        "post_interval <- c(rho_grid[which.min(cumsum(posterior) >= 0.025)], rho_grid[which.min(cumsum(posterior) >= 0.975)])",
        "> ",
        "",
        "> ",
        "# Print results",
        "> ",
        "cat(\"Posterior mean: \", post_mean, \"\\n\")",
        "Posterior mean:  0.1855539 \n",
        "> ",
        "cat(\"Posterior median: \", post_median, \"\\n\")",
        "Posterior median:  0 \n",
        "> ",
        "cat(\"Posterior mode: \", post_mode, \"\\n\")",
        "Posterior mode:  0 \n",
        "> ",
        "cat(\"95% posterior interval: [\", post_interval[1], \", \", post_interval[2], \"]\\n\")",
        "95% posterior interval: [ 0 ,  0 ]\n",
        "> ",
        "",
        "> ",
        "library(mvtnorm)",
        "> ",
        "",
        "> ",
        "# Define observed data",
        "> ",
        "data <- matrix(c(-3.3, -2.6, 0.1, -0.2, -1.1, -1.5, 2.7, 1.5, 2.0, 1.9, -0.4, -0.3), ncol = 2)",
        "> ",
        "",
        "> ",
        "# Define grid of values for rho",
        "> ",
        "rho_grid <- seq(0, 1, length.out = 10000)",
        "> ",
        "",
        "> ",
        "# Define prior density function",
        "> ",
        "prior <- rep(1, length(rho_grid))",
        "> ",
        "",
        "> ",
        "# Define likelihood function",
        "> ",
        "likelihood <- sapply(rho_grid, function(rho) {",
        "+ ",
        "  mean(dmvnorm(data, mean = c(0,0), sigma = matrix(c(1, rho, rho, 1), nrow = 2), log = TRUE))",
        "+ ",
        "})",
        "> ",
        "",
        "> ",
        "# Compute unnormalized posterior density function",
        "> ",
        "posterior_unnorm <- prior * exp(likelihood)",
        "> ",
        "",
        "> ",
        "# Numerically integrate to obtain posterior density function",
        "> ",
        "posterior <- posterior_unnorm / sum(posterior_unnorm)",
        "> ",
        "",
        "> ",
        "# Plot posterior distribution",
        "> ",
        "plot(rho_grid, posterior, type = \"l\", xlab = \"Correlation coefficient rho\", ylab = \"Posterior density\")",
        "> ",
        "",
        "> ",
        "# Compute posterior mean, median, mode, and 95% interval",
        "> ",
        "post_mean <- sum(rho_grid * posterior)",
        "> ",
        "post_median <- rho_grid[which.min(abs(cumsum(posterior) - 0.5) == 0)]",
        "> ",
        "post_mode <- rho_grid[which.max(posterior)]",
        "> ",
        "post_interval <- c(rho_grid[which.min(cumsum(posterior) >= 0.025)], rho_grid[which.min(cumsum(posterior) >= 0.975)])",
        "> ",
        "",
        "> ",
        "# Print results",
        "> ",
        "cat(\"Posterior mean: \", post_mean, \"\\n\")",
        "Posterior mean:  0.1855539 \n",
        "> ",
        "cat(\"Posterior median: \", post_median, \"\\n\")",
        "Posterior median:  0 \n",
        "> ",
        "cat(\"Posterior mode: \", post_mode, \"\\n\")",
        "Posterior mode:  0 \n",
        "> ",
        "cat(\"95% posterior interval: [\", post_interval[1], \", \", post_interval[2], \"]\\n\")",
        "95% posterior interval: [ 0 ,  0 ]\n",
        "> ",
        "",
        "> ",
        "data = scan(\"http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/agehw.dat\") ",
        "Error in scan(\"http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/agehw.dat\") : \n  scan() expected 'a real', got 'ageh'\n",
        "> ",
        "data <- scan(\"http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/agehw.dat\") ",
        "Error in scan(\"http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/agehw.dat\") : \n  scan() expected 'a real', got 'ageh'\n",
        "> ",
        "data <- scan(\"http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/agehw.dat\")[,1]",
        "Error in scan(\"http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/agehw.dat\") : \n  scan() expected 'a real', got 'ageh'\n",
        "> ",
        "data <- scan(\"http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/agehw.dat\")[1,]",
        "Error in scan(\"http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/agehw.dat\") : \n  scan() expected 'a real', got 'ageh'\n",
        "> ",
        "install.packages(\"haven\")",
        "trying URL 'https://cran.rstudio.com/bin/macosx/contrib/4.1/haven_2.5.1.tgz'\n",
        "Content type 'application/x-gzip'",
        " length 1046601 bytes (1022 KB)\n",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "\n",
        "downloaded 1022 KB\n\n",
        "\nThe downloaded binary packages are in\n\t/var/folders/rb/x4vhwjb16wj764ztdb96gnlh0000gn/T//RtmpTjo2aE/downloaded_packages\n",
        "> ",
        "library(haven)",
        "> ",
        "data <- read.dat(\"http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/agehw.dat\")",
        "Error in read.dat(\"http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/agehw.dat\") : \n  could not find function \"read.dat\"\n",
        "> ",
        "#install.packages(\"haven\")",
        "> ",
        "library(haven)",
        "> ",
        "data <- read_dta(\"http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/agehw.dat\")",
        "Error: Failed to parse /private/var/folders/rb/x4vhwjb16wj764ztdb96gnlh0000gn/T/RtmpTjo2aE/file1218f7faba8aa: This version of the file format is not supported.\n",
        "> ",
        "data <- scan(\"http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/school1.dat\") ",
        "Read 25 items\n",
        "> ",
        "data",
        " [1]  2.11  9.75 13.88 11.30  8.93 15.66 16.38  4.54  8.86 11.94 12.47 11.11 11.65 14.53  9.61\n[16]  7.38  3.34  9.06  9.45  5.98  7.44  8.50  1.55 11.45  9.73\n",
        "> ",
        "x = structure(c(59, 43, 34, 32, 42, 38, 55, 67, 64, 45, 49, 72, 34, ",
        "+ ",
        "            70, 34, 50, 41, 52, 60, 34, 28, 35, 77, 39, 46, 26, 38, 43, 68, ",
        "+ ",
        "            86, 77, 60, 50, 59, 38, 48, 55, 58, 54, 60, 75, 47, 48, 33),",
        "+ ",
        "            .Dim = c(22L, 2L), .Dimnames = list(NULL, c(\"husband\", \"wife\")))",
        "> ",
        "mu0<-c(0,0)",
        "> ",
        "L0<-matrix( c(10000,0,0,10000),nrow=2,ncol=2)",
        "> ",
        "",
        "> ",
        "nu0<-4",
        "> ",
        "S0<-matrix( c(100,0,0,100),nrow=2,ncol=2)",
        "> ",
        "",
        "> ",
        "n<-dim(x)[1]",
        "> ",
        "n",
        "[1] 22\n",
        "> ",
        "# Data from the textbook of pretest and posttest score",
        "> ",
        "x = structure(c(59, 43, 34, 32, 42, 38, 55, 67, 64, 45, 49, 72, 34, ",
        "+ ",
        "            70, 34, 50, 41, 52, 60, 34, 28, 35, 77, 39, 46, 26, 38, 43, 68, ",
        "+ ",
        "            86, 77, 60, 50, 59, 38, 48, 55, 58, 54, 60, 75, 47, 48, 33),",
        "+ ",
        "            .Dim = c(22L, 2L), .Dimnames = list(NULL, c(\"husband\", \"wife\")))",
        "> ",
        "mu0<-c(0,0)",
        "> ",
        "L0<-matrix( c(10000,0,0,10000),nrow=2,ncol=2)",
        "> ",
        "",
        "> ",
        "nu0<-4",
        "> ",
        "S0<-matrix( c(100,0,0,100),nrow=2,ncol=2)",
        "> ",
        "",
        "> ",
        "n<-dim(x)[1]",
        "> ",
        "xbar = apply(x, 2, mean)",
        "> ",
        "Sigma<-cov(x) ; THETA<-SIGMA<-NULL",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "library(MASS) # for the mvrnorm function",
        "> ",
        "# install.packages(\"MCMCpack\")",
        "> ",
        "library(MCMCpack) # for the riwish function",
        "> ",
        "",
        "> ",
        "for(s in 1:20000) ",
        "+ ",
        "{",
        "+ ",
        "  ",
        "+ ",
        "  ###update theta",
        "+ ",
        "  Ln<-solve( solve(L0) + n*solve(Sigma) )",
        "+ ",
        "  mun<-Ln%*%( solve(L0)%*%mu0 + n*solve(Sigma)%*% xbar )",
        "+ ",
        "  theta = mvrnorm(1,mun,Ln)  ",
        "+ ",
        "  ",
        "+ ",
        "  ",
        "+ ",
        "  ###update Sigma",
        "+ ",
        "  Sn<- S0 + ( t(x)-c(theta) )%*%t( t(x)-c(theta) ) ",
        "+ ",
        "  Sigma<-riwish(nu0+n, Sn)",
        "+ ",
        "  # Sigma<-solve( rwish(1, nu0+n, solve(Sn)) )",
        "+ ",
        "  ",
        "+ ",
        "  # Update the output",
        "+ ",
        "  THETA = rbind(THETA,theta)",
        "+ ",
        "  SIGMA = rbind(SIGMA,c(Sigma)) # notice the Sigma matrix is vectorized",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "quantile(THETA[,1]-THETA[,2], prob=c(.025,.5,.975) )",
        "      2.5%        50%      97.5% \n-11.489693  -6.640952  -1.833803 \n",
        "> ",
        "mean( THETA[,1] - THETA[,2])",
        "[1] -6.64032\n",
        "> ",
        "mean( THETA[,1] > THETA[,2]) ",
        "[1] 0.0046\n",
        "> ",
        "hist(THETA[,2])",
        "> ",
        "hist(THETA[,1], add = T, col = \"red\")",
        "> ",
        "",
        "> ",
        "bivn.kde <- kde2d(THETA[,1], THETA[,2], n = 200) ",
        "> ",
        "contour(bivn.kde, nlevels = 50)",
        "> ",
        "",
        "> ",
        "apply(THETA, 2, mean) # posterior mean of theta",
        " husband     wife \n47.10543 53.74575 \n",
        "> ",
        "",
        "> ",
        "cov(THETA) # covariance matrix of the posterior distribution of theta",
        "         husband      wife\nhusband 8.155256  6.533823\nwife    6.533823 10.874084\n",
        "> ",
        "# Compare to covariance of prior distribution",
        "> ",
        "L0",
        "      [,1]  [,2]\n[1,] 10000     0\n[2,]     0 10000\n",
        "> ",
        "",
        "> ",
        "#install.packages(\"emdbook\")",
        "> ",
        "library(emdbook)",
        "> ",
        "library(coda)",
        "> ",
        "HPDregionplot(mcmc(THETA), add = T, col = \"red\")",
        "> ",
        "abline(a=0,b=1, col=\"red\")",
        "> ",
        "data <- read.table(\"http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/agehw.dat\")",
        "> ",
        "data <- read.table(\"http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/agehw.dat\")",
        "> ",
        "data",
        "> ",
        "data <- read.table(\"http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/agehw.dat\", header = FALSE)",
        "> ",
        "data",
        "> ",
        "data <- read.table(\"http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/agehw.dat\")",
        "> ",
        "data",
        "> ",
        "data <- read.table(\"http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/agehw.dat\")",
        "> ",
        "data$V1",
        "  [1] \"ageh\" \"53\"   \"40\"   \"35\"   \"40\"   \"44\"   \"48\"   \"33\"   \"68\"   \"37\"   \"38\"   \"32\"   \"70\"  \n [14] \"56\"   \"24\"   \"29\"   \"28\"   \"66\"   \"68\"   \"59\"   \"54\"   \"43\"   \"31\"   \"39\"   \"51\"   \"43\"  \n [27] \"34\"   \"43\"   \"71\"   \"40\"   \"22\"   \"47\"   \"51\"   \"66\"   \"32\"   \"45\"   \"64\"   \"38\"   \"40\"  \n [40] \"60\"   \"70\"   \"28\"   \"38\"   \"36\"   \"35\"   \"37\"   \"59\"   \"36\"   \"40\"   \"44\"   \"37\"   \"47\"  \n [53] \"35\"   \"31\"   \"41\"   \"25\"   \"43\"   \"41\"   \"34\"   \"39\"   \"35\"   \"34\"   \"44\"   \"42\"   \"26\"  \n [66] \"33\"   \"68\"   \"33\"   \"47\"  ",
        " \"73\"   \"39\"   \"65\"   \"26\"   \"33\"   \"79\"   \"70\"   \"40\"   \"56\"  \n [79] \"31\"   \"53\"   \"70\"   \"61\"   \"28\"   \"26\"   \"43\"   \"43\"   \"32\"   \"49\"   \"51\"   \"47\"   \"52\"  \n [92] \"46\"   \"43\"   \"24\"   \"33\"   \"34\"   \"75\"   \"52\"   \"38\"   \"42\"   \"48\"  \n",
        "> ",
        "data <- read.data(\"http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/agehw.dat\")",
        "Error in read.data(\"http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/agehw.dat\") : \n  could not find function \"read.data\"\n",
        "> ",
        "data <- read.dta(\"http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/agehw.dat\")",
        "Error in read.dta(\"http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/agehw.dat\") : \n  could not find function \"read.dta\"\n",
        "> ",
        "data <- read.dat(\"http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/agehw.dat\")",
        "Error in read.dat(\"http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/agehw.dat\") : \n  could not find function \"read.dat\"\n",
        "> ",
        "data <- read(\"http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/agehw.dat\")",
        "Error in read(\"http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/agehw.dat\") : \n  could not find function \"read\"\n",
        "> ",
        "data <- read.coda(\"http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/agehw.dat\")",
        "Error in read.table(index.file, row.names = 1, col.names = c(\"\", \"begin\",  : \n  argument \"index.file\" is missing, with no default\n",
        "> ",
        "data <- read_dta(\"http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/agehw.dat\")",
        "Error: Failed to parse /private/var/folders/rb/x4vhwjb16wj764ztdb96gnlh0000gn/T/RtmpTjo2aE/file1218f682f45e2: This version of the file format is not supported.\n",
        "> ",
        "x = structure(c(53,38,40,39,35,32,40,36,44,47,48,47,33,31,68,72,37,45,38,48,32,27,70,71,56,55,24,21,29,26,28,24,66,62,68,60,59,53,54,53,43,42,31,32,39,29,51,38,43,42,34,33,43,40,71,65,40,35,22,17,47,50,51,50,66,61,32,29,45,41,64,57,38,30,40,37,60,28,70,64,28,26,38,38,36,29,35,39,37,31,59,65,36,30,40,39,44,40,37,36,47,44,35,31,31,41,40,25,22,43,34,41,43,34,28,39,36,35,32,34,33,44,41,42,41,26,28,33,32,68,68,33,35,47,40,73,50,39,34,65,61,26,26,33,32,79,61,70,62,40,33,56,57,31,28,53,47,70,68,61,61,28,26,26,24,43,29,43,46,32,32,49,45,51,43,47,45,52,47,46,45,43,40,24,23,33,35,34,34,75,55,52,52,38,26,42,41,48,42),.Dim = c(100L, 2L), .Dimnames = list(NULL, c(\"husband\", \"wife\")))",
        "Error in attributes(.Data) <- c(attributes(.Data), attrib) : \n  dims [product 200] do not match the length of object [199]\n",
        "> ",
        "# Data from the textbook of pretest and posttest score",
        "> ",
        "x = structure(c(53,38,40,39,35,32,40,36,44,47,48,47,33,31,68,72,37,45,38,48,32,27,70,71,56,55,24,21,29,26,28,24,66,62,68,60,59,53,54,53,43,42,31,32,39,29,51,38,43,42,34,33,43,40,71,65,40,35,22,17,47,50,51,50,66,61,32,29,45,41,64,57,38,30,40,37,60,28,70,64,28,26,38,38,36,29,35,39,37,31,59,65,36,30,40,39,44,40,37,36,47,44,35,31,31,41,40,25,22,43,34,41,43,34,28,39,36,35,32,34,33,44,41,42,41,26,28,33,32,68,68,33,35,47,40,73,50,39,34,65,61,26,26,33,32,79,61,70,62,40,33,56,57,31,28,53,47,70,68,61,61,28,26,26,24,43,29,43,46,32,32,49,45,51,43,47,45,52,47,46,45,43,40,24,23,33,35,34,34,75,55,52,52,38,26,42,41,48,42),.Dim = c(100L, 2L), .Dimnames = list(NULL, c(\"husband\", \"wife\")))",
        "Error in attributes(.Data) <- c(attributes(.Data), attrib) : \n  dims [product 200] do not match the length of object [199]\n",
        "> ",
        "y <- c(53,38,40,39,35,32,40,36,44,47,48,47,33,31,68,72,37,45,38,48,32,27,70,71,56,55,24,21,29,26,28,24,66,62,68,60,59,53,54,53,43,42,31,32,39,29,51,38,43,42,34,33,43,40,71,65,40,35,22,17,47,50,51,50,66,61,32,29,45,41,64,57,38,30,40,37,60,28,70,64,28,26,38,38,36,29,35,39,37,31,59,65,36,30,40,39,44,40,37,36,47,44,35,31,31,41,40,25,22,43,34,41,43,34,28,39,36,35,32,34,33,44,41,42,41,26,28,33,32,68,68,33,35,47,40,73,50,39,34,65,61,26,26,33,32,79,61,70,62,40,33,56,57,31,28,53,47,70,68,61,61,28,26,26,24,43,29,43,46,32,32,49,45,51,43,47,45,52,47,46,45,43,40,24,23,33,35,34,34,75,55,52,52,38,26,42,41,48,42)",
        "> ",
        "",
        "> ",
        "y",
        "  [1] 53 38 40 39 35 32 40 36 44 47 48 47 33 31 68 72 37 45 38 48 32 27 70 71 56 55 24 21 29 26\n [31] 28 24 66 62 68 60 59 53 54 53 43 42 31 32 39 29 51 38 43 42 34 33 43 40 71 65 40 35 22 17\n [61] 47 50 51 50 66 61 32 29 45 41 64 57 38 30 40 37 60 28 70 64 28 26 38 38 36 29 35 39 37 31\n [91] 59 65 36 30 40 39 44 40 37 36 47 44 35 31 31 41 40 25 22 43 34 41 43 34 28 39 36 35 32 34\n[121] 33 44 41 42 41 26 28 33 32 68 68 33 35 47 40 73 50 39 34 65 61 26 26 33 32 79 61 70 62 40\n[151] 33 56 57 31 28 53 47 70 68",
        " 61 61 28 26 26 24 43 29 43 46 32 32 49 45 51 43 47 45 52 47 46\n[181] 45 43 40 24 23 33 35 34 34 75 55 52 52 38 26 42 41 48 42\n",
        "> ",
        "y <- c(53,38,40,39,35,32,40,36,44,47,48,47,33,31,68,72,37,45,38,48,32,27,70,71,56,55,24,21,29,26,28,24,66,62,68,60,59,53,54,53,43,42,31,32,39,29,51,38,43,42,34,33,43,40,71,65,40,35,22,17,47,50,51,50,66,61,32,29,45,41,64,57,38,30,40,37,60,28,70,64,28,26,38,38,36,29,35,39,37,31,59,65,36,30,40,39,44,40,37,36,47,44,35,31,31,41,40,25,22,43,34,41,43,34,28,39,36,35,32,34,33,44,41,42,41,26,28,33,32,68,68,33,35,47,40,73,50,39,34,65,61,26,26,33,32,79,61,70,62,40,33,56,57,31,28,53,47,70,68,61,61,28,26,26,24,43,29,43,46,32,32,49,45,51,43,47,45,52,47,46,45,43,40,24,23,33,35,34,34,75,55,52,52,38,26,42,41,48,42)",
        "> ",
        "",
        "> ",
        "length(y)",
        "[1] 199\n",
        "> ",
        "y <- c(53,38,40,39,35,32,40,36,44,47,48,47,33,31,68,72,37,45,38,48,32,27,70,71,56,55,24,21,29,26,28,24,66,62,68,60,59,53,54,53,43,42,31,32,39,29,51,38,43,42,34,33,43,40,71,65,40,35,22,17,47,50,51,50,66,61,32,29,45,41,64,57,38,30,40,37,60,28,70,64,28,26,38,38,36,29,35,39,37,31,59,65,36,30,40,39,44,40,37,36,47,44,35,31,31,31,41,40,25,22,43,34,41,43,34,28,39,36,35,32,34,33,44,41,42,41,26,28,33,32,68,68,33,35,47,40,73,50,39,34,65,61,26,26,33,32,79,61,70,62,40,33,56,57,31,28,53,47,70,68,61,61,28,26,26,24,43,29,43,46,32,32,49,45,51,43,47,45,52,47,46,45,43,40,24,23,33,35,34,34,75,55,52,52,38,26,42,41,48,42)",
        "> ",
        "",
        "> ",
        "length(y)",
        "[1] 200\n",
        "> ",
        "# Data from the textbook of pretest and posttest score",
        "> ",
        "x = structure(y,.Dim = c(100L, 2L), .Dimnames = list(NULL, c(\"husband\", \"wife\")))",
        "> ",
        "",
        "> ",
        "mu0<-c(0,0)",
        "> ",
        "L0<-matrix( c(10000,0,0,10000),nrow=2,ncol=2)",
        "> ",
        "",
        "> ",
        "nu0<-4",
        "> ",
        "S0<-matrix( c(100,0,0,100),nrow=2,ncol=2)",
        "> ",
        "",
        "> ",
        "n<-dim(x)[1]",
        "> ",
        "xbar = apply(x, 2, mean)",
        "> ",
        "Sigma<-cov(x) ; THETA<-SIGMA<-NULL",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "library(MASS) # for the mvrnorm function",
        "> ",
        "# install.packages(\"MCMCpack\")",
        "> ",
        "library(MCMCpack) # for the riwish function",
        "> ",
        "",
        "> ",
        "for(s in 1:20000) ",
        "+ ",
        "{",
        "+ ",
        "  ",
        "+ ",
        "  ###update theta",
        "+ ",
        "  Ln<-solve( solve(L0) + n*solve(Sigma) )",
        "+ ",
        "  mun<-Ln%*%( solve(L0)%*%mu0 + n*solve(Sigma)%*% xbar )",
        "+ ",
        "  theta = mvrnorm(1,mun,Ln)  ",
        "+ ",
        "  ",
        "+ ",
        "  ",
        "+ ",
        "  ###update Sigma",
        "+ ",
        "  Sn<- S0 + ( t(x)-c(theta) )%*%t( t(x)-c(theta) ) ",
        "+ ",
        "  Sigma<-riwish(nu0+n, Sn)",
        "+ ",
        "  # Sigma<-solve( rwish(1, nu0+n, solve(Sn)) )",
        "+ ",
        "  ",
        "+ ",
        "  # Update the output",
        "+ ",
        "  THETA = rbind(THETA,theta)",
        "+ ",
        "  SIGMA = rbind(SIGMA,c(Sigma)) # notice the Sigma matrix is vectorized",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "quantile(THETA[,1]-THETA[,2], prob=c(.025,.5,.975) )",
        "     2.5%       50%     97.5% \n-2.643045  1.140230  4.833275 \n",
        "> ",
        "mean( THETA[,1] - THETA[,2])",
        "[1] 1.142714\n",
        "> ",
        "mean( THETA[,1] > THETA[,2]) ",
        "[1] 0.73005\n",
        "> ",
        "hist(THETA[,2])",
        "> ",
        "hist(THETA[,1], add = T, col = \"red\")",
        "> ",
        "",
        "> ",
        "bivn.kde <- kde2d(THETA[,1], THETA[,2], n = 200) ",
        "> ",
        "contour(bivn.kde, nlevels = 50)",
        "> ",
        "",
        "> ",
        "apply(THETA, 2, mean) # posterior mean of theta",
        " husband     wife \n43.23301 42.09030 \n",
        "> ",
        "",
        "> ",
        "cov(THETA) # covariance matrix of the posterior distribution of theta",
        "            husband        wife\nhusband  1.82193002 -0.02877985\nwife    -0.02877985  1.73406034\n",
        "> ",
        "# Compare to covariance of prior distribution",
        "> ",
        "L0",
        "      [,1]  [,2]\n[1,] 10000     0\n[2,]     0 10000\n",
        "> ",
        "",
        "> ",
        "#install.packages(\"emdbook\")",
        "> ",
        "library(emdbook)",
        "> ",
        "library(coda)",
        "> ",
        "HPDregionplot(mcmc(THETA), add = T, col = \"red\")",
        "> ",
        "abline(a=0,b=1, col=\"red\")",
        "> ",
        "# Data from the textbook of pretest and posttest score",
        "> ",
        "x = structure(y,.Dim = c(100L, 2L), .Dimnames = list(NULL, c(\"husband\", \"wife\")))",
        "> ",
        "",
        "> ",
        "mu0<-c(0,0)",
        "> ",
        "L0<-matrix( c(10000,0,0,10000),nrow=2,ncol=2)",
        "> ",
        "",
        "> ",
        "nu0<-4",
        "> ",
        "S0<-matrix( c(100,0,0,100),nrow=2,ncol=2)",
        "> ",
        "",
        "> ",
        "n<-dim(x)[1]",
        "> ",
        "xbar = apply(x, 2, mean)",
        "> ",
        "Sigma<-cov(x) ; THETA<-SIGMA<-NULL",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "library(MASS) # for the mvrnorm function",
        "> ",
        "# install.packages(\"MCMCpack\")",
        "> ",
        "library(MCMCpack) # for the riwish function",
        "> ",
        "",
        "> ",
        "for(s in 1:20000) ",
        "+ ",
        "{",
        "+ ",
        "  ",
        "+ ",
        "  ###update theta",
        "+ ",
        "  Ln<-solve( solve(L0) + n*solve(Sigma) )",
        "+ ",
        "  mun<-Ln%*%( solve(L0)%*%mu0 + n*solve(Sigma)%*% xbar )",
        "+ ",
        "  theta = mvrnorm(1,mun,Ln)  ",
        "+ ",
        "  ",
        "+ ",
        "  ",
        "+ ",
        "  ###update Sigma",
        "+ ",
        "  Sn<- S0 + ( t(x)-c(theta) )%*%t( t(x)-c(theta) ) ",
        "+ ",
        "  Sigma<-riwish(nu0+n, Sn)",
        "+ ",
        "  # Sigma<-solve( rwish(1, nu0+n, solve(Sn)) )",
        "+ ",
        "  ",
        "+ ",
        "  # Update the output",
        "+ ",
        "  THETA = rbind(THETA,theta)",
        "+ ",
        "  SIGMA = rbind(SIGMA,c(Sigma)) # notice the Sigma matrix is vectorized",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "quantile(THETA[,1]-THETA[,2], prob=c(.025,.5,.975) )",
        "     2.5%       50%     97.5% \n-2.600670  1.134227  4.860005 \n",
        "> ",
        "mean( THETA[,1] - THETA[,2])",
        "[1] 1.130621\n",
        "> ",
        "mean( THETA[,1] > THETA[,2]) ",
        "[1] 0.7242\n",
        "> ",
        "hist(THETA[,2])",
        "> ",
        "hist(THETA[,1], add = T, col = \"red\")",
        "> ",
        "",
        "> ",
        "bivn.kde <- kde2d(THETA[,1], THETA[,2], n = 200) ",
        "> ",
        "contour(bivn.kde, nlevels = 50)",
        "> ",
        "",
        "> ",
        "apply(THETA, 2, mean) # posterior mean of theta",
        " husband     wife \n43.22850 42.09788 \n",
        "> ",
        "",
        "> ",
        "cov(THETA) # covariance matrix of the posterior distribution of theta",
        "            husband        wife\nhusband  1.79149366 -0.03722727\nwife    -0.03722727  1.71995061\n",
        "> ",
        "# Compare to covariance of prior distribution",
        "> ",
        "L0",
        "      [,1]  [,2]\n[1,] 10000     0\n[2,]     0 10000\n",
        "> ",
        "",
        "> ",
        "#install.packages(\"emdbook\")",
        "> ",
        "library(emdbook)",
        "> ",
        "library(coda)",
        "> ",
        "HPDregionplot(mcmc(THETA), add = T, col = \"red\")",
        "> ",
        "abline(a=0,b=1, col=\"red\")",
        "> ",
        "# Finding the stationary distribution of a transition matrix",
        "> ",
        "",
        "> ",
        "# Brute force:",
        "> ",
        "",
        "> ",
        "install.packages(\"expm\")",
        "trying URL 'https://cran.rstudio.com/bin/macosx/contrib/4.1/expm_0.999-7.tgz'\n",
        "Content type 'application/x-gzip'",
        " length 238528 bytes (232 KB)\n",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "\n",
        "downloaded 232 KB\n\n",
        "\nThe downloaded binary packages are in\n\t/var/folders/rb/x4vhwjb16wj764ztdb96gnlh0000gn/T//RtmpTjo2aE/downloaded_packages\n",
        "> ",
        "library(expm) # used to compute matrix power",
        "Loading required package: Matrix\n",
        "\nAttaching package: ‘expm’\n\n",
        "The following object is masked from ‘package:Matrix’:\n\n    expm\n\n",
        "Warning messages:\n",
        "1: package ‘expm’ was built under R version 4.1.2 \n",
        "2: package ‘Matrix’ was built under R version 4.1.2 \n",
        "> ",
        "",
        "> ",
        "# Define the transition matrix ",
        "> ",
        "(P = matrix(c(c(0.4,0.5,0.1), c(0.3,0.4,0.3), c(0.2,0.3,0.5)), nrow = 3, byrow = T))",
        "     [,1] [,2] [,3]\n[1,]  0.4  0.5  0.1\n[2,]  0.3  0.4  0.3\n[3,]  0.2  0.3  0.5\n",
        "> ",
        "",
        "> ",
        "# Check sum across = 1",
        "> ",
        "apply(P,1,sum)  ",
        "[1] 1 1 1\n",
        "> ",
        "",
        "> ",
        "# Solution",
        "> ",
        "(pi_bru = (P %^% 100)[1,])",
        "[1] 0.3 0.4 0.3\n",
        "> ",
        "",
        "> ",
        "# Check:",
        "> ",
        "pi_bru - pi_bru%*%P",
        "              [,1]         [,2]          [,3]\n[1,] -5.551115e-17 5.551115e-17 -5.551115e-17\n",
        "> ",
        "",
        "> ",
        "# Eigen decomposition",
        "> ",
        "library(MASS) # For the ginv function",
        "> ",
        "",
        "> ",
        "# Get the eigenvectors of P, note: R returns right eigenvectors",
        "> ",
        "r=eigen(P)",
        "> ",
        "(rvec=r$vectors)",
        "           [,1]          [,2]        [,3]\n[1,] -0.5773503 -7.071068e-01 -0.77204865\n[2,] -0.5773503 -2.403703e-16  0.63167617\n[3,] -0.5773503  7.071068e-01 -0.07018624\n",
        "> ",
        "",
        "> ",
        "# left eigenvectors are the inverse of the right eigenvectors",
        "> ",
        "(lvec=ginv(r$vectors))",
        "           [,1]       [,2]       [,3]\n[1,] -0.5196152 -0.6928203 -0.5196152\n[2,] -0.4714045 -0.4714045  0.9428090\n[3,] -0.4749269  0.9498538 -0.4749269\n",
        "> ",
        "# The eigenvalues",
        "> ",
        "(lam<-r$values)",
        "[1] 1.000000e+00 3.000000e-01 5.019856e-17\n",
        "> ",
        "# Two ways of checking the spectral decomposition:",
        "> ",
        "## Standard definition",
        "> ",
        "rvec%*%diag(lam)%*%ginv(rvec)",
        "     [,1] [,2] [,3]\n[1,]  0.4  0.5  0.1\n[2,]  0.3  0.4  0.3\n[3,]  0.2  0.3  0.5\n",
        "> ",
        "",
        "> ",
        "## With left eigenvectors ",
        "> ",
        "rvec%*%diag(lam)%*%lvec",
        "     [,1] [,2] [,3]\n[1,]  0.4  0.5  0.1\n[2,]  0.3  0.4  0.3\n[3,]  0.2  0.3  0.5\n",
        "> ",
        "",
        "> ",
        "# Normalize the solution",
        "> ",
        "pi_eig<-lvec[1,]/sum(lvec[1,])",
        "> ",
        "pi_eig",
        "[1] 0.3 0.4 0.3\n",
        "> ",
        "",
        "> ",
        "#check",
        "> ",
        "sum(pi_eig)",
        "[1] 1\n",
        "> ",
        "pi_eig %*% P",
        "     [,1] [,2] [,3]\n[1,]  0.3  0.4  0.3\n",
        "> ",
        "",
        "> ",
        "# Alternative: we can also obtain the left eigenvectors as the transposes of the right eigenvectors of t(P)",
        "> ",
        "r<-eigen(t(P))",
        "> ",
        "V<-r$vectors",
        "> ",
        "lam<-r$values",
        "> ",
        "V%*%diag(lam)%*%ginv(V)",
        "     [,1] [,2] [,3]\n[1,]  0.4  0.3  0.2\n[2,]  0.5  0.4  0.3\n[3,]  0.1  0.3  0.5\n",
        "> ",
        "",
        "> ",
        "# Rate of convergence:",
        "> ",
        "lam[2]",
        "[1] 0.3\n",
        "> ",
        "",
        "> ",
        "# Linear equation method",
        "> ",
        "K = 3",
        "> ",
        "(A = rbind(t(P-diag(rep(1, K)))[1:(K-1),], rep(1, K)))",
        "     [,1] [,2] [,3]\n[1,] -0.6  0.3  0.2\n[2,]  0.5 -0.6  0.3\n[3,]  1.0  1.0  1.0\n",
        "> ",
        "solve (A, c(rep(0,K-1),1))",
        "[1] 0.3 0.4 0.3\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Mixture model:",
        "> ",
        "mu1 = -2",
        "> ",
        "mu2 = 2",
        "> ",
        "s1 = 0.6",
        "> ",
        "s2 = 0.6",
        "> ",
        "pd = c(0.5, 0.5)",
        "> ",
        "",
        "> ",
        "# iid Monte Carlo sample",
        "> ",
        "S = 10000",
        "> ",
        "d = rbinom(S, 1, pd[1])",
        "> ",
        "x = 1:S",
        "> ",
        "for (i in 1:S) if (d[i] == 0) x[i] = rnorm(1, mu1, s1) else x[i] = rnorm(1, mu2, s2)",
        "> ",
        "hist(x, freq = F, ylim = c(0,0.4))",
        "> ",
        "grid = seq(-5, 5, len = 1000)",
        "> ",
        "lines(grid, pd[1]*dnorm(grid, mu1, s1) + pd[2]*dnorm(grid, mu2, s2), lw = 2)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Gibbs",
        "> ",
        "d = 1:S",
        "> ",
        "xGibbs = 1:S",
        "> ",
        "for (i in 2:S)",
        "+ ",
        "{",
        "+ ",
        "  if (d[i-1] == 0) xGibbs[i] = rnorm(1, mu1, s1) else xGibbs[i] = rnorm(1, mu2, s2)",
        "+ ",
        "  d[i] = rbinom(1, 1, 1-pd[1]*dnorm(xGibbs[i], mu1, s1)/(pd[1]*dnorm(xGibbs[i], mu1, s1) + pd[2]*dnorm(xGibbs[i], mu2, s2)))",
        "+ ",
        "}",
        "> ",
        "hist(xGibbs, freq = F, ylim = c(0,0.4))",
        "> ",
        "",
        "> ",
        "lines(grid, pd[1]*dnorm(grid, mu1, s1) + pd[2]*dnorm(grid, mu2, s2), lw = 2)",
        "> ",
        "table(d)",
        "d\n   0    1 \n4738 5262 \n",
        "> ",
        "par(mfrow = c(1,2))",
        "> ",
        "ts.plot(xGibbs)",
        "> ",
        "ts.plot(x)",
        "> ",
        "",
        "> ",
        "acf(xGibbs)",
        "> ",
        "acf(x)",
        "> ",
        "",
        "> ",
        "install.packages(\"coda\")",
        "Error in install.packages : Updating loaded packages\n",
        "> ",
        "library(coda)",
        "> ",
        "effectiveSize(xGibbs)",
        "    var1 \n14.07166 \n",
        "> ",
        "effectiveSize(x)",
        " var1 \n10000 \n\nRestarting R session...\n\n"
    ]
}