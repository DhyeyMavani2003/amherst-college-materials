x_lim <- range(samples[,1])
y_lim <- range(samples[,2])
lim <- range(c(x_lim, y_lim))
plot(samples[,1], samples[,2], pch=20, col="blue", xlim=lim, ylim=lim,
xlab="x", ylab="y", main=paste("Scatterplot of (x, y), c =", c_values[i]))
}
# Create traceplots and scatterplots for c=0.25
par(mfrow=c(2,1))
traceplot(samples_025)
scatterplot(samples_025)
# Create traceplots and scatterplots for c=0.05
par(mfrow=c(2,1))
traceplot(samples_005)
scatterplot(samples_005)
# Create traceplots and scatterplots for c=0.02
par(mfrow=c(2,1))
traceplot(samples_002)
scatterplot(samples_002)
# Function to create traceplots of x and y
traceplot <- function(samples) {
par(mfrow=c(2,1))
plot(samples[,1], type="l", xlab="Iteration", ylab="x")
plot(samples[,2], type="l", xlab="Iteration", ylab="y")
}
# Function to create a scatterplot of (x,y)
scatterplot <- function(samples) {
x_lim <- range(samples[,1])
y_lim <- range(samples[,2])
lim <- range(c(x_lim, y_lim))
plot(samples[,2], samples[,1], pch=20, col="blue", xlim=lim, ylim=lim,
xlab="x", ylab="y", main=paste("Scatterplot of (x, y), c =", c_values[i]))
}
# Create traceplots and scatterplots for c=0.25
par(mfrow=c(2,1))
traceplot(samples_025)
scatterplot(samples_025)
# Create traceplots and scatterplots for c=0.05
par(mfrow=c(2,1))
traceplot(samples_005)
scatterplot(samples_005)
# Create traceplots and scatterplots for c=0.02
par(mfrow=c(2,1))
traceplot(samples_002)
scatterplot(samples_002)
# Function to create traceplots of x and y
traceplot <- function(samples) {
par(mfrow=c(2,1))
plot(samples[,1], type="l", xlab="Iteration", ylab="x")
plot(samples[,2], type="l", xlab="Iteration", ylab="y")
}
# Function to create a scatterplot of (x,y)
scatterplot <- function(samples) {
x_lim <- range(samples[,1])
y_lim <- range(samples[,2])
lim <- range(c(x_lim, y_lim))
plot(samples[,1], samples[,2], pch=20, col="blue", xlim=lim, ylim=lim,
xlab="x", ylab="y", main=paste("Scatterplot of (x, y), c =", c_values[i]))
}
# Create traceplots and scatterplots for c=0.25
par(mfrow=c(2,1))
traceplot(samples_025)
scatterplot(samples_025)
# Create traceplots and scatterplots for c=0.05
par(mfrow=c(2,1))
traceplot(samples_005)
scatterplot(samples_005)
# Create traceplots and scatterplots for c=0.02
par(mfrow=c(2,1))
traceplot(samples_002)
scatterplot(samples_002)
# Function to generate a single iteration of the Gibbs sampler
gibbs_step <- function(x, y, c) {
x_new <- runif(1, max(y-c, 0), min(y+c, 1))
y_new <- runif(1, max(x-c, 0), min(x+c, 1))
return(list(x=x_new, y=y_new))
}
# Function to run the Gibbs sampler for S iterations
gibbs_sampler <- function(c, S=10000) {
# Initialize x and y
x <- runif(1)
y <- runif(1)
# Store the samples
samples <- matrix(NA, nrow=S, ncol=2)
# Run the Gibbs sampler
for (i in 1:S) {
xy <- gibbs_step(x, y, c)
x <- xy$x
y <- xy$y
samples[i,] <- c(x,y)
}
return(samples)
}
# Test the sampler
c_values <- c(0.25, 0.05, 0.02)
for (c in c_values) {
res <- gibbs_sampler(c)
x <- res$x
y <- res$y
cat(paste("c =", c, "\n"))
cat(paste("Mean of x:", mean(x), "\n"))
cat(paste("Mean of y:", mean(y), "\n"))
}
# Function to generate a single iteration of the Gibbs sampler
gibbs_step <- function(x, y, c) {
x_new <- runif(1, max(y-c, 0), min(y+c, 1))
y_new <- runif(1, max(x-c, 0), min(x+c, 1))
return(list(x=x_new, y=y_new))
}
# Function to run the Gibbs sampler for S iterations
gibbs_sampler <- function(c, S=10000) {
# Initialize x and y
x <- runif(1)
y <- runif(1)
# Store the samples
samples <- matrix(NA, nrow=S, ncol=2)
# Run the Gibbs sampler
for (i in 1:S) {
xy <- gibbs_step(x, y, c)
x <- xy$x
y <- xy$y
samples[i,] <- c(x,y)
}
return(samples)
}
# Test the sampler
c_values <- c(0.25, 0.05, 0.02)
for (c in c_values) {
res <- gibbs_sampler(c)
x <- res[,1]
y <- res[,2]
cat(paste("c =", c, "\n"))
cat(paste("Mean of x:", mean(x), "\n"))
cat(paste("Mean of y:", mean(y), "\n"))
}
par(mfrow=c(2, 2))
for (i in seq_along(c_values)) {
res <- gibbs_sampler(c_values[i])
x <- res$x
y <- res$y
# Traceplots
plot(res$x, type="l", main=paste("Traceplot of x, c =", c_values[i]))
plot(res$y, type="l", main=paste("Traceplot of y, c =", c_values[i]))
# Scatterplot
plot(res$x, res$y, main=paste("Scatterplot of (x, y), c =", c_values[i]))
}
par(mfrow=c(2, 2))
for (i in seq_along(c_values)) {
res <- gibbs_sampler(c_values[i])
x <- res[,1]
y <- res[,2]
# Traceplots
plot(res$x, type="l", main=paste("Traceplot of x, c =", c_values[i]))
plot(res$y, type="l", main=paste("Traceplot of y, c =", c_values[i]))
# Scatterplot
plot(res$x, res$y, main=paste("Scatterplot of (x, y), c =", c_values[i]))
}
par(mfrow=c(2, 2))
for (i in seq_along(c_values)) {
res <- gibbs_sampler(c_values[i])
x <- res[,1]
y <- res[,2]
# Traceplots
plot(x, type="l", main=paste("Traceplot of x, c =", c_values[i]))
plot(y, type="l", main=paste("Traceplot of y, c =", c_values[i]))
# Scatterplot
plot(x, y, main=paste("Scatterplot of (x, y), c =", c_values[i]))
}
gibbs_sampler <- function(c, S=10000) {
x <- numeric(S)
y <- numeric(S)
y[1] <- runif(1, 0, 1)
for (i in 2:S) {
x[i] <- runif(1, max(y[i-1]-c, 0), min(y[i-1]+c, 1))
y[i] <- runif(1, max(x[i]-c, 0), min(x[i]+c, 1))
}
return(list(x=x, y=y))
}
# Test the sampler
c_values <- c(0.25, 0.05, 0.02)
for (c in c_values) {
res <- gibbs_sampler(c)
x <- res$x
y <- res$y
cat(paste("c =", c, "\n"))
cat(paste("Mean of x:", mean(x), "\n"))
cat(paste("Mean of y:", mean(y), "\n"))
}
par(mfrow=c(2, 2))
for (i in seq_along(c_values)) {
res <- gibbs_sampler(c_values[i])
x <- res$x
y <- res$y
# Traceplots
plot(x, type="l", main=paste("Traceplot of x, c =", c_values[i]))
plot(y, type="l", main=paste("Traceplot of y, c =", c_values[i]))
# Scatterplot
plot(x, y, main=paste("Scatterplot of (x, y), c =", c_values[i]))
}
# Set initial values
u <- 0.5
v <- 0.5
samples_uv <- matrix(0, nrow=S, ncol=2)
# Run Gibbs sampler
for (i in 1:S) {
# Sample U from f(U|V)
a <- 1 + as.numeric(u + v + c < 1)
b <- 1 + as.numeric(u - v + c < 1)
u <- rbeta(1, a, b)
# Sample V from f(V|U)
c <- 1 + as.numeric(u + v - c > 0)
d <- 1 + as.numeric(u - v - c > 0)
v <- rbeta(1, c, d)
# Store sample
samples_uv[i,] <- c(u,v)
}
# Transform (U, V) samples to (X, Y) samples
samples_xy <- matrix(0, nrow=S, ncol=2)
for (i in 1:S) {
samples_xy[i,1] <- samples_uv[i,1] + samples_uv[i,2]
samples_xy[i,2] <- samples_uv[i,1] - samples_uv[i,2]
}
# Create traceplots and scatterplots for c=0.25
par(mfrow=c(2,1))
traceplot(samples_xy[c_025,])
# Transform (U, V) samples to (X, Y) samples
samples_xy <- matrix(0, nrow=S, ncol=2)
for (i in 1:S) {
samples_xy[i,1] <- samples_uv[i,1] + samples_uv[i,2]
samples_xy[i,2] <- samples_uv[i,1] - samples_uv[i,2]
}
# Create traceplots and scatterplots for c=0.25
c_025 <- (1:S)[seq(1,S,S/100)]  # indices for thinning the samples
par(mfrow=c(2,1))
plot(samples_xy[c_025, 1], type="l", xlab="Iteration", ylab="x", main="Traceplot of x for c=0.25")
plot(samples_xy[c_025, 2], type="l", xlab="Iteration", ylab="y", main="Traceplot of y for c=0.25")
plot(samples_xy[c_025,], pch=".", xlab="x", ylab="y", main="Scatterplot of (x,y) for c=0.25", asp=1)
# Create traceplots and scatterplots for c=0.05
c_005 <- (1:S)[seq(1,S,S/100)]
par(mfrow=c(2,1))
plot(samples_xy[c_005, 1], type="l", xlab="Iteration", ylab="x", main="Traceplot of x for c=0.05")
plot(samples_xy[c_005, 2], type="l", xlab="Iteration", ylab="y", main="Traceplot of y for c=0.05")
plot(samples_xy[c_005,], pch=".", xlab="x", ylab="y", main="Scatterplot of (x,y) for c=0.05", asp=1)
# Create traceplots and scatterplots for c=0.02
c_002 <- (1:S)[seq(1,S,S/100)]
par(mfrow=c(2,1))
plot(samples_xy[c_002, 1], type="l", xlab="Iteration", ylab="x", main="Traceplot of x for c=0.02")
plot(samples_xy[c_002, 2], type="l", xlab="Iteration", ylab="y", main="Traceplot of y for c=0.02")
plot(samples_xy[c_002,], pch=".", xlab="x", ylab="y", main="Scatterplot of (x,y) for c=0.02", asp=1)
# Transform (U, V) samples to (X, Y) samples
samples_xy <- matrix(0, nrow=S, ncol=2)
for (i in 1:S) {
samples_xy[i,1] <- samples_uv[i,1] + samples_uv[i,2]
samples_xy[i,2] <- samples_uv[i,1] - samples_uv[i,2]
}
# Create traceplots and scatterplots for c=0.25
c_025 <- (1:S)[seq(1,S,S/100)]  # indices for thinning the samples
par(mfrow=c(2,1))
plot(samples_xy[c_025, 1], type="l", xlab="Iteration", ylab="x", main="Traceplot of x for c=0.25")
plot(samples_xy[c_025, 2], type="l", xlab="Iteration", ylab="y", main="Traceplot of y for c=0.25")
plot(samples_xy[c_025,], pch=".", xlab="x", ylab="y", main="Scatterplot of (x,y) for c=0.25", asp=1)
# Create traceplots and scatterplots for c=0.05
c_005 <- (1:S)[seq(1,S,S/100)]
par(mfrow=c(2,1))
plot(samples_xy[c_005, 1], type="l", xlab="Iteration", ylab="x", main="Traceplot of x for c=0.05")
plot(samples_xy[c_005, 2], type="l", xlab="Iteration", ylab="y", main="Traceplot of y for c=0.05")
plot(samples_xy[c_005,], pch=".", xlab="x", ylab="y", main="Scatterplot of (x,y) for c=0.05", asp=1)
# Create traceplots and scatterplots for c=0.02
c_002 <- (1:S)[seq(1,S,S/100)]
par(mfrow=c(2,1))
plot(samples_xy[c_002, 1], type="l", xlab="Iteration", ylab="x", main="Traceplot of x for c=0.02")
plot(samples_xy[c_002, 2], type="l", xlab="Iteration", ylab="y", main="Traceplot of y for c=0.02")
plot(samples_xy[c_002,], pch=".", xlab="x", ylab="y", main="Scatterplot of (x,y) for c=0.02", asp=1)
# Transform (U, V) samples to (X, Y) samples
samples_xy <- matrix(0, nrow=S, ncol=2)
for (i in 1:S) {
samples_xy[i,1] <- samples_uv[i,1] + samples_uv[i,2]
samples_xy[i,2] <- samples_uv[i,1] - samples_uv[i,2]
}
# Create traceplots and scatterplots for c=0.25
c_025 <- (1:S)[seq(1,S)]  # indices for thinning the samples
par(mfrow=c(2,1))
plot(samples_xy[c_025, 1], type="l", xlab="Iteration", ylab="x", main="Traceplot of x for c=0.25")
plot(samples_xy[c_025, 2], type="l", xlab="Iteration", ylab="y", main="Traceplot of y for c=0.25")
plot(samples_xy[c_025,], pch=".", xlab="x", ylab="y", main="Scatterplot of (x,y) for c=0.25", asp=1)
# Create traceplots and scatterplots for c=0.05
c_005 <- (1:S)[seq(1,S)]
par(mfrow=c(2,1))
plot(samples_xy[c_005, 1], type="l", xlab="Iteration", ylab="x", main="Traceplot of x for c=0.05")
plot(samples_xy[c_005, 2], type="l", xlab="Iteration", ylab="y", main="Traceplot of y for c=0.05")
plot(samples_xy[c_005,], pch=".", xlab="x", ylab="y", main="Scatterplot of (x,y) for c=0.05", asp=1)
# Create traceplots and scatterplots for c=0.02
c_002 <- (1:S)[seq(1,S)]
par(mfrow=c(2,1))
plot(samples_xy[c_002, 1], type="l", xlab="Iteration", ylab="x", main="Traceplot of x for c=0.02")
plot(samples_xy[c_002, 2], type="l", xlab="Iteration", ylab="y", main="Traceplot of y for c=0.02")
plot(samples_xy[c_002,], pch=".", xlab="x", ylab="y", main="Scatterplot of (x,y) for c=0.02", asp=1)
gibbs_sampler <- function(c, S=10000) {
x <- numeric(S)
y <- numeric(S)
y[1] <- runif(1, 0, 1)
for (i in 2:S) {
x[i] <- runif(1, max(y[i-1]-c, 0), min(y[i-1]+c, 1))
y[i] <- runif(1, max(x[i]-c, 0), min(x[i]+c, 1))
}
return(list(x=x, y=y))
}
set.seed(123)
c_values <- c(0.25, 0.05, 0.02)
for (c in c_values) {
res <- gibbs_sampler(c)
x <- res$x
y <- res$y
cat(paste("c =", c, "\n"))
cat(paste("Mean of x:", mean(x), "\n"))
cat(paste("Mean of y:", mean(y), "\n"))
}
library(ggplot2)
par(mfrow=c(2, 2))
for (i in seq_along(c_values)) {
res <- gibbs_sampler(c_values[i])
x <- res$x
y <- res$y
# Traceplots
plot(x, type="l", main=paste("Traceplot of x, c =", c_values[i]))
plot(y, type="l", main=paste("Traceplot of y, c =", c_values[i]))
# Scatterplot
plot(x, y, main=paste("Scatterplot of (x, y), c =", c_values[i]))
# Alternative version of scatterplot using ggplot2
ggplot(data=data.frame(x=x, y=y)) +
geom_point() +
ggtitle(paste("Scatterplot of (x, y), c =", c_values[i]))
}
gibbs_sampler <- function(c, S=10000) {
u <- numeric(S)
v <- numeric(S)
v[1] <- runif(1, 0, 1)
for (i in 2:S) {
u[i] <- runif(1, max(-v[i-1], 0), min(1-v[i-1], 1))
v[i] <- runif(1, max(-u[i], -c/2), min(1-u[i], c/2))
}
return(list(u=u, v=v))
}
set.seed(123)
c_values <- c(0.25, 0.05, 0.02)
for (c in c_values) {
res <- gibbs_sampler(c)
u <- res$u
v <- res$v
cat(paste("c =", c, "\n"))
cat(paste("Mean of u:", mean(u), "\n"))
cat(paste("Mean of v:", mean(v), "\n"))
}
library(ggplot2)
par(mfrow=c(2, 2))
for (i in seq_along(c_values)) {
res <- gibbs_sampler(c_values[i])
u <- res$u
v <- res$v
# Traceplots
plot(u, type="l", main=paste("Traceplot of u, c =", c_values[i]))
plot(v, type="l", main=paste("Traceplot of v, c =", c_values[i]))
# Scatterplot
plot(u, v, main=paste("Scatterplot of (u, v), c =", c_values[i]))
# Alternative version of scatterplot using ggplot2
ggplot(data=data.frame(u=u, v=v)) +
geom_point() +
ggtitle(paste("Scatterplot of (u, v), c =", c_values[i]))
}
gibbs_sampler <- function(c, S=10000) {
u <- numeric(S)
v <- numeric(S)
v[1] <- 0.1
for (i in 2:S) {
u[i] <- runif(1, max(-v[i-1], 0), min(1-v[i-1], 1))
v[i] <- runif(1, max(-u[i], -c/2), min(1-u[i], c/2))
}
return(list(u=u, v=v))
}
set.seed(123)
c_values <- c(0.25, 0.05, 0.02)
for (c in c_values) {
res <- gibbs_sampler(c)
u <- res$u
v <- res$v
cat(paste("c =", c, "\n"))
cat(paste("Mean of u:", mean(u), "\n"))
cat(paste("Mean of v:", mean(v), "\n"))
}
library(ggplot2)
par(mfrow=c(2, 2))
for (i in seq_along(c_values)) {
res <- gibbs_sampler(c_values[i])
u <- res$u
v <- res$v
# Traceplots
plot(u, type="l", main=paste("Traceplot of u, c =", c_values[i]))
plot(v, type="l", main=paste("Traceplot of v, c =", c_values[i]))
# Scatterplot
plot(u, v, main=paste("Scatterplot of (u, v), c =", c_values[i]))
# Alternative version of scatterplot using ggplot2
ggplot(data=data.frame(u=u, v=v)) +
geom_point() +
ggtitle(paste("Scatterplot of (u, v), c =", c_values[i]))
}
gibbs_sampler <- function(c, S=10000) {
u <- numeric(S)
v <- numeric(S)
v[1] <- 0.01
for (i in 2:S) {
u[i] <- runif(1, max(-v[i-1], 0), min(1-v[i-1], 1))
v[i] <- runif(1, max(-u[i], -c/2), min(1-u[i], c/2))
}
return(list(u=u, v=v))
}
set.seed(123)
c_values <- c(0.25, 0.05, 0.02)
for (c in c_values) {
res <- gibbs_sampler(c)
u <- res$u
v <- res$v
cat(paste("c =", c, "\n"))
cat(paste("Mean of u:", mean(u), "\n"))
cat(paste("Mean of v:", mean(v), "\n"))
}
library(ggplot2)
par(mfrow=c(2, 2))
for (i in seq_along(c_values)) {
res <- gibbs_sampler(c_values[i])
u <- res$u
v <- res$v
# Traceplots
plot(u, type="l", main=paste("Traceplot of u, c =", c_values[i]))
plot(v, type="l", main=paste("Traceplot of v, c =", c_values[i]))
# Scatterplot
plot(u, v, main=paste("Scatterplot of (u, v), c =", c_values[i]))
# Alternative version of scatterplot using ggplot2
ggplot(data=data.frame(u=u, v=v)) +
geom_point() +
ggtitle(paste("Scatterplot of (u, v), c =", c_values[i]))
}
gibbs_sampler <- function(c, S=10000) {
u <- numeric(S)
v <- numeric(S)
v[1] <- 0.02
for (i in 2:S) {
u[i] <- runif(1, max(-v[i-1], 0), min(1-v[i-1], 1))
v[i] <- runif(1, max(-u[i], -c/2), min(1-u[i], c/2))
}
return(list(u=u, v=v))
}
set.seed(123)
c_values <- c(0.25, 0.05, 0.02)
for (c in c_values) {
res <- gibbs_sampler(c)
u <- res$u
v <- res$v
cat(paste("c =", c, "\n"))
cat(paste("Mean of u:", mean(u), "\n"))
cat(paste("Mean of v:", mean(v), "\n"))
}
library(ggplot2)
par(mfrow=c(2, 2))
for (i in seq_along(c_values)) {
res <- gibbs_sampler(c_values[i])
u <- res$u
v <- res$v
# Traceplots
plot(u, type="l", main=paste("Traceplot of u, c =", c_values[i]))
plot(v, type="l", main=paste("Traceplot of v, c =", c_values[i]))
# Scatterplot
plot(u, v, main=paste("Scatterplot of (u, v), c =", c_values[i]))
# Alternative version of scatterplot using ggplot2
ggplot(data=data.frame(u=u, v=v)) +
geom_point() +
ggtitle(paste("Scatterplot of (u, v), c =", c_values[i]))
}
gibbs_sampler <- function(c, S=10000) {
u <- numeric(S)
v <- numeric(S)
v[1] <- 0.005
for (i in 2:S) {
u[i] <- runif(1, max(-v[i-1], 0), min(1-v[i-1], 1))
v[i] <- runif(1, max(-u[i], -c/2), min(1-u[i], c/2))
}
return(list(u=u, v=v))
}
set.seed(123)
c_values <- c(0.25, 0.05, 0.02)
for (c in c_values) {
res <- gibbs_sampler(c)
u <- res$u
v <- res$v
cat(paste("c =", c, "\n"))
cat(paste("Mean of u:", mean(u), "\n"))
cat(paste("Mean of v:", mean(v), "\n"))
}
library(ggplot2)
par(mfrow=c(2, 2))
for (i in seq_along(c_values)) {
res <- gibbs_sampler(c_values[i])
u <- res$u
v <- res$v
# Traceplots
plot(u, type="l", main=paste("Traceplot of u, c =", c_values[i]))
plot(v, type="l", main=paste("Traceplot of v, c =", c_values[i]))
# Scatterplot
plot(u, v, main=paste("Scatterplot of (u, v), c =", c_values[i]))
# Alternative version of scatterplot using ggplot2
ggplot(data=data.frame(u=u, v=v)) +
geom_point() +
ggtitle(paste("Scatterplot of (u, v), c =", c_values[i]))
}
