model3 <- lm(Time ~ Length, data = HighPeaks)
msummary(model3)
model <- lm(Time ~ Elevation + Difficulty + Ascent + Length, data = HighPeaks)
msummary(model)
mplot(model, which = 1)
mplot(model, which = 2)
# primal symmetric form
library(lpSolve)
f.obj <- c(2, -1, -2)
f.con <- matrix(c(-3,-1,-4,
-2,-1,-1),
nrow = 2, byrow = TRUE)
f.dir <- c(">=",">=")
f.rhs <- c(-6,-3)
result <- lp("min", f.obj, f.con, f.dir, f.rhs)
print(result)
soln <- result$solution
print(soln)
# dual symmetric form
f.obj <- c(-6,-3)
f.con <- matrix(c(-3,-2,
-1,-1,
-4,-1),
nrow = 3, byrow = TRUE)
f.dir <- c("<=","<=","<=")
f.rhs <- c(2,-1,-2)
result <- lp("max", f.obj, f.con, f.dir, f.rhs)
print(result)
soln <- result$solution
print(soln)
library(pracma)
library(pracma)
A <- matrix(c(3, 1, 4, 2, 1, 1), 2, 3, byrow = TRUE)
A
rref(A)
Ab <- matrix(c(3, 1, 4, 2, 2, 1, 1, 1), 2, 4, byrow = TRUE)
Ab
rref(Ab)
a1 <- c(1,2)
a2 <- c(2,1)
a3 <- c(1,1)
b <- c(3,2)
# choose different pairs of linearly independent
# columns to be first two in A to find all basic solns
rref(cbind(a1,a2,b))
rref(cbind(a1,a3,b))
rref(cbind(a2,a3,b))
A <- matrix(c(3, 1, 4, 2, 1, 1), 2, 3, byrow = TRUE)
A
rref(A)
Ab <- matrix(c(3, 1, 4, 2, 2, 1, 1, 1), 2, 4, byrow = TRUE)
Ab
rref(Ab)
a1 <- c(1,2)
a2 <- c(2,1)
a3 <- c(1,1)
b <- c(3,2)
# choose different pairs of linearly independent
# columns to be first two in A to find all basic solns
rref(cbind(a1,a2,b))
rref(cbind(a1,a3,b))
rref(cbind(a2,a3,b))
# Primal solution with the asymmetric form
library(lpSolve)
f.obj <- c(5,3,5)
f.con <- matrix(c(3,1,4,
2,1,1),
nrow = 2, byrow = TRUE)
f.dir <- c("=","=")
f.rhs <- c(2,1)
result <- lp("min", f.obj, f.con, f.dir, f.rhs)
print(result)
soln <- result$solution
print(soln)
optimalvalue <- result$objval
print(optimalvalue)
library(pracma)
A <- matrix(c(3, 1, 4, 2, 1, 1), 2, 3, byrow = TRUE)
A
rref(A)
Ab <- matrix(c(3, 1, 4, 2, 2, 1, 1, 1), 2, 4, byrow = TRUE)
Ab
rref(Ab)
a1 <- c(1,2)
a2 <- c(2,1)
a3 <- c(1,1)
b <- c(3,2)
# choose different pairs of linearly independent
# columns to be first two in A to find all basic solns
rref(cbind(a1,a2,b))
rref(cbind(a1,a3,b))
rref(cbind(a2,a3,b))
A <- matrix(c(3, 1, 4, 2, 1, 1), 2, 3, byrow = TRUE)
A
rref(A)
Ab <- matrix(c(3, 1, 4, 2, 2, 1, 1, 1), 2, 4, byrow = TRUE)
Ab
rref(Ab)
a1 <- c(3,2)
a2 <- c(1,1)
a3 <- c(4,1)
b <- c(2,1)
# choose different pairs of linearly independent
# columns to be first two in A to find all basic solns
rref(cbind(a1,a2,b))
rref(cbind(a1,a3,b))
rref(cbind(a2,a3,b))
4600*27
2400*27
# Import lpSolve package
library(lpSolve)
# Set coefficients of the objective function
f.obj <- c(-11,-16,-15,-5,0,0,0)
# Set matrix corresponding to coefficients of constraints by rows
# Assumes non-negative solutions
# nA nB nC nD n1 n2 n3
f.con <- matrix(c(1,0,0,0,-1,0,0,
0,1,0,0,1,-1,0,
0,0,1,0,0,1,-1,
0,0,0,1,0,0,1,
1,rep(0,6),
0,1,rep(0,5),
rep(0,2),1,rep(0,4),
rep(0,3),1,rep(0,3)),
nrow = 8, byrow = TRUE)
f.con
# Set inequality signs
f.dir <- c("=","=","=","=","<=","<=","<=","<=")
# Set right hand side coefficients
f.rhs <- c(600,900,1200,2000,rep(1300,4))
# Solution to linear program
result <- lp("min", f.obj, f.con, f.dir, f.rhs, compute.sens = T)
primalsoln <- result$solution # p1 p2 p3 p4 s1 s2 s3
optimalvalue <- result$objval
dualsoln <- result$duals[1:8]
# increase month 1 demand
f.rhs <- c(700,900,1200,2000,rep(1300,4))
result <- lp("min", f.obj, f.con, f.dir, f.rhs)
optimalvalue_new <- result$objval
optimalvalue_new-optimalvalue
# increase month 1 production capacity
f.rhs <- c(600,900,1200,2000,1400,rep(1300,3))
result <- lp("min", f.obj, f.con, f.dir, f.rhs)
optimalvalue_new <- result$objval
optimalvalue_new-optimalvalue
# Import lpSolve package
library(lpSolve)
# Set coefficients of the objective function
f.obj <- c(-11,-16,-15,-5,0,0,0)
# Set matrix corresponding to coefficients of constraints by rows
# Assumes non-negative solutions
# nA nB nC nD n1 n2 n3
f.con <- matrix(c(6,12,9,1,1,0,0,
4,4,6,1,0,1,0,
3,2,3,2,0,0,1,),
nrow = 3, byrow = TRUE)
# Import lpSolve package
library(lpSolve)
# Set coefficients of the objective function
f.obj <- c(-11,-16,-15,-5,0,0,0)
# Set matrix corresponding to coefficients of constraints by rows
# Assumes non-negative solutions
# nA nB nC nD n1 n2 n3
f.con <- matrix(c(6,12,9,1,1,0,0,
4,4,6,1,0,1,0,
3,2,3,2,0,0,1),
nrow = 3, byrow = TRUE)
f.con
# Set inequality signs
f.dir <- c("=","=","=")
# Set right hand side coefficients
f.rhs <- c(324000, 124200, 64800)
# Solution to linear program
result <- lp("min", f.obj, f.con, f.dir, f.rhs, compute.sens = T)
primalsoln <- result$solution
optimalvalue <- result$objval
# Import lpSolve package
library(lpSolve)
# Set coefficients of the objective function
f.obj <- c(-11,-16,-15,-5,0,0,0)
# Set matrix corresponding to coefficients of constraints by rows
# Assumes non-negative solutions
# nA nB nC nD n1 n2 n3
f.con <- matrix(c(6,12,9,1,1,0,0,
4,4,6,1,0,1,0,
3,2,3,2,0,0,1),
nrow = 3, byrow = TRUE)
f.con
# Set inequality signs
f.dir <- c("=","=","=")
# Set right hand side coefficients
f.rhs <- c(324000, 124200, 64800)
# Solution to linear program
result <- lp("min", f.obj, f.con, f.dir, f.rhs, compute.sens = T)
primalsoln <- result$solution
primalsoln
optimalvalue <- result$objval
optimalvalue
# Production plan worksheet problem
# Import lpSolve package
library(lpSolve)
# Set coefficients of the objective function
f.obj <- c(3000,8000,6000,7000,2000,2000,2000)
# Set matrix corresponding to coefficients of constraints by rows
# Assumes non-negative solutions
# p1 p2 p3 p4 s1 s2 s3
f.con <- matrix(c(1,0,0,0,-1,0,0,
0,1,0,0,1,-1,0,
0,0,1,0,0,1,-1,
0,0,0,1,0,0,1,
1,rep(0,6),
0,1,rep(0,5),
rep(0,2),1,rep(0,4),
rep(0,3),1,rep(0,3)),
nrow = 8, byrow = TRUE)
# Set inequality signs
f.dir <- c("=","=","=","=","<=","<=","<=","<=")
# Set right hand side coefficients
f.rhs <- c(600,900,1200,2000,rep(1300,4))
# Solution to linear program
result <- lp("min", f.obj, f.con, f.dir, f.rhs, compute.sens = T)
primalsoln <- result$solution # p1 p2 p3 p4 s1 s2 s3
optimalvalue <- result$objval
dualsoln <- result$duals[1:8]
# increase month 1 demand
f.rhs <- c(700,900,1200,2000,rep(1300,4))
result <- lp("min", f.obj, f.con, f.dir, f.rhs)
optimalvalue_new <- result$objval
optimalvalue_new-optimalvalue
# increase month 1 production capacity
f.rhs <- c(600,900,1200,2000,1400,rep(1300,3))
result <- lp("min", f.obj, f.con, f.dir, f.rhs)
optimalvalue_new <- result$objval
optimalvalue_new-optimalvalue
# Production plan worksheet problem
# Import lpSolve package
library(lpSolve)
# Set coefficients of the objective function
f.obj <- c(3000,8000,6000,7000,2000,2000,2000)
# Set matrix corresponding to coefficients of constraints by rows
# Assumes non-negative solutions
# p1 p2 p3 p4 s1 s2 s3
f.con <- matrix(c(1,0,0,0,-1,0,0,
0,1,0,0,1,-1,0,
0,0,1,0,0,1,-1,
0,0,0,1,0,0,1,
1,rep(0,6),
0,1,rep(0,5),
rep(0,2),1,rep(0,4),
rep(0,3),1,rep(0,3)),
nrow = 8, byrow = TRUE)
# Set inequality signs
f.dir <- c("=","=","=","=","<=","<=","<=","<=")
# Set right hand side coefficients
f.rhs <- c(600,900,1200,2000,rep(1300,4))
# Solution to linear program
result <- lp("min", f.obj, f.con, f.dir, f.rhs, compute.sens = T)
primalsoln <- result$solution # p1 p2 p3 p4 s1 s2 s3
primalsoln
optimalvalue <- result$objval
dualsoln <- result$duals[1:8]
# increase month 1 demand
f.rhs <- c(700,900,1200,2000,rep(1300,4))
result <- lp("min", f.obj, f.con, f.dir, f.rhs)
optimalvalue_new <- result$objval
optimalvalue_new-optimalvalue
# increase month 1 production capacity
f.rhs <- c(600,900,1200,2000,1400,rep(1300,3))
result <- lp("min", f.obj, f.con, f.dir, f.rhs)
optimalvalue_new <- result$objval
optimalvalue_new-optimalvalue
# Import lpSolve package
library(lpSolve)
# Set coefficients of the objective function
f.obj <- c(-11,-16,-15,-5,0,0,0)
# Set matrix corresponding to coefficients of constraints by rows
# Assumes non-negative solutions
# nA nB nC nD n1 n2 n3
f.con <- matrix(c(6,12,9,1,1,0,0,
4,4,6,1,0,1,0,
3,2,3,2,0,0,1),
nrow = 3, byrow = TRUE)
f.con
# Set inequality signs
f.dir <- c("=","=","=")
# Set right hand side coefficients
f.rhs <- c(324000, 124200, 64800)
# Solution to linear program
result <- lp("min", f.obj, f.con, f.dir, f.rhs, compute.sens = T)
primalsoln <- result$solution
primalsoln
optimalvalue <- result$objval
optimalvalue
# Import lpSolve package
library(lpSolve)
# Set coefficients of the objective function
f.obj <- c(-11,-16,-15,-5,0,0,0)
# Set matrix corresponding to coefficients of constraints by rows
# Assumes non-negative solutions
# nA nB nC nD n1 n2 n3
f.con <- matrix(c(6,12,9,1,1,0,0,
4,4,6,1,0,1,0,
3,2,3,2,0,0,1),
nrow = 3, byrow = TRUE)
# Set inequality signs
f.dir <- c("=","=","=")
# Set right hand side coefficients
f.rhs <- c(324000, 124200, 64800)
# Solution to linear program
result <- lp("min", f.obj, f.con, f.dir, f.rhs, compute.sens = T)
primalsoln <- result$solution
primalsoln
optimalvalue <- result$objval
optimalvalue
# Import lpSolve package
library(lpSolve)
# Set coefficients of the objective function
f.obj <- c(-11,-16,-15,-5,0,0,0)
# Set matrix corresponding to coefficients of constraints by rows
# Assumes non-negative solutions
# nA nB nC nD n1 n2 n3
f.con <- matrix(c(6,12,9,1,1,0,0,
4,4,6,1,0,1,0,
3,2,3,2,0,0,1),
nrow = 3, byrow = TRUE)
# Set inequality signs
f.dir <- c("=","=","=")
# Set right hand side coefficients
f.rhs <- c(324000, 124200, 64800)
# Solution to linear program
result <- lp("min", f.obj, f.con, f.dir, f.rhs, compute.sens = T)
primalsoln <- result$solution
print("nA   nB ")
primalsoln
optimalvalue <- result$objval
optimalvalue
# Import lpSolve package
library(lpSolve)
# Set coefficients of the objective function
f.obj <- c(-11,-16,-15,-5,0,0,0)
# Set matrix corresponding to coefficients of constraints by rows
# Assumes non-negative solutions
# nA nB nC nD n1 n2 n3
f.con <- matrix(c(6,12,9,1,1,0,0,
4,4,6,1,0,1,0,
3,2,3,2,0,0,1),
nrow = 3, byrow = TRUE)
# Set inequality signs
f.dir <- c("=","=","=")
# Set right hand side coefficients
f.rhs <- c(324000, 124200, 64800)
# Solution to linear program
result <- lp("min", f.obj, f.con, f.dir, f.rhs, compute.sens = T)
primalsoln <- result$solution
print("    nA   nB ")
primalsoln
optimalvalue <- result$objval
optimalvalue
# Import lpSolve package
library(lpSolve)
# Set coefficients of the objective function
f.obj <- c(-11,-16,-15,-5,0,0,0)
# Set matrix corresponding to coefficients of constraints by rows
# Assumes non-negative solutions
# nA nB nC nD n1 n2 n3
f.con <- matrix(c(6,12,9,1,1,0,0,
4,4,6,1,0,1,0,
3,2,3,2,0,0,1),
nrow = 3, byrow = TRUE)
# Set inequality signs
f.dir <- c("=","=","=")
# Set right hand side coefficients
f.rhs <- c(324000, 124200, 64800)
# Solution to linear program
result <- lp("min", f.obj, f.con, f.dir, f.rhs, compute.sens = T)
primalsoln <- result$solution
print("    nA      nB ")
primalsoln
optimalvalue <- result$objval
optimalvalue
# Import lpSolve package
library(lpSolve)
# Set coefficients of the objective function
f.obj <- c(-11,-16,-15,-5,0,0,0)
# Set matrix corresponding to coefficients of constraints by rows
# Assumes non-negative solutions
# nA nB nC nD n1 n2 n3
f.con <- matrix(c(6,12,9,1,1,0,0,
4,4,6,1,0,1,0,
3,2,3,2,0,0,1),
nrow = 3, byrow = TRUE)
# Set inequality signs
f.dir <- c("=","=","=")
# Set right hand side coefficients
f.rhs <- c(324000, 124200, 64800)
# Solution to linear program
result <- lp("min", f.obj, f.con, f.dir, f.rhs, compute.sens = T)
primalsoln <- result$solution
print("    nA      nB   nC   nD   n1   n2   n3")
primalsoln
optimalvalue <- result$objval
optimalvalue
# Import lpSolve package
library(lpSolve)
# Set coefficients of the objective function
f.obj <- c(-11,-16,-15,-5,0,0,0)
# Set matrix corresponding to coefficients of constraints by rows
# Assumes non-negative solutions
# nA nB nC nD n1 n2 n3
f.con <- matrix(c(6,12,9,1,1,0,0,
4,4,6,1,0,1,0,
3,2,3,2,0,0,1),
nrow = 3, byrow = TRUE)
# Set inequality signs
f.dir <- c("=","=","=")
# Set right hand side coefficients
f.rhs <- c(324000, 124200, 64800)
# Solution to linear program
result <- lp("min", f.obj, f.con, f.dir, f.rhs, compute.sens = T)
primalsoln <- result$solution
print("    nA      nB         nC     nD           n1      n2         n3")
primalsoln
optimalvalue <- result$objval
optimalvalue
# Import lpSolve package
library(lpSolve)
# Set coefficients of the objective function
f.obj <- c(-11,-16,-15,-5,0,0,0)
# Set matrix corresponding to coefficients of constraints by rows
# Assumes non-negative solutions
# nA nB nC nD n1 n2 n3
f.con <- matrix(c(6,12,9,1,1,0,0,
4,4,6,1,0,1,0,
3,2,3,2,0,0,1),
nrow = 3, byrow = TRUE)
# Set inequality signs
f.dir <- c("=","=","=")
# Set right hand side coefficients
f.rhs <- c(324000, 124200, 64800)
# Solution to linear program
result <- lp("min", f.obj, f.con, f.dir, f.rhs, compute.sens = T)
primalsoln <- result$solution
print("    nA      nB          nC      nD            n1      n2          n3")
primalsoln
optimalvalue <- result$objval
optimalvalue
# Import lpSolve package
library(lpSolve)
# Set coefficients of the objective function
f.obj <- c(-11,-16,-15,-5,0,0,0)
# Set matrix corresponding to coefficients of constraints by rows
# Assumes non-negative solutions
# nA nB nC nD n1 n2 n3
f.con <- matrix(c(6,12,9,1,1,0,0,
4,4,6,1,0,1,0,
3,2,3,2,0,0,1),
nrow = 3, byrow = TRUE)
# Set inequality signs
f.dir <- c("=","=","=")
# Set right hand side coefficients
f.rhs <- c(324000, 124200, 64800)
# Solution to linear program
result <- lp("min", f.obj, f.con, f.dir, f.rhs, compute.sens = T)
primalsoln <- result$solution
print("    nA      nB          nC      nD           n1      n2          n3")
primalsoln
optimalvalue <- result$objval
optimalvalue
# Import lpSolve package
library(lpSolve)
# Set coefficients of the objective function
f.obj <- c(-11,-16,-15,-5,0,0,0)
# Set matrix corresponding to coefficients of constraints by rows
# Assumes non-negative solutions
# nA nB nC nD n1 n2 n3
f.con <- matrix(c(6,12,9,1,1,0,0,
4,4,6,1,0,1,0,
3,2,3,2,0,0,1),
nrow = 3, byrow = TRUE)
# Set inequality signs
f.dir <- c("=","=","=")
# Set right hand side coefficients
f.rhs <- c(324000, 124200, 64800)
# Solution to linear program
result <- lp("min", f.obj, f.con, f.dir, f.rhs, compute.sens = T)
primalsoln <- result$solution
print("    nA      nB          nC      nD           n1      n2          n3")
primalsoln
optimalvalue <- result$objval
print("The optimal value of the objective function is ... ")
optimalvalue
data(Meniscus)
#Method is recorded numerically, we need it to be a factor
# FYI - The 3 methods are vertical suture, meniscus arrow, FastT-Fix
Meniscus <- mutate(Meniscus, Method = factor(Method)) #overwrites the variable
library(mosaic)
library(tidyr)
library(Stat2Data)
library(DescTools) #for MCs
options(digits = 6)
data(Meniscus)
#Method is recorded numerically, we need it to be a factor
# FYI - The 3 methods are vertical suture, meniscus arrow, FastT-Fix
Meniscus <- mutate(Meniscus, Method = factor(Method)) #overwrites the variable
data(Meniscus)
#Method is recorded numerically, we need it to be a factor
# FYI - The 3 methods are vertical suture, meniscus arrow, FastT-Fix
Meniscus <- mutate(Meniscus, Method = factor(Method)) #overwrites the variable
tinytex::reinstall_tinytex()
meniscus_aov <- aov(Stiffness ~ Method, data = Meniscus)
summary(meniscus_aov)
PostHocTest(meniscus_aov, method = "lsd")
